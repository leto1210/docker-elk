version: '2.2'

services:
  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    user: "1000:1000"
    cpus: "2"
    mem_limit: "2G"
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - /opt/temp01/elasticsearch/data1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - "ES_JAVA_OPTS: -Xmx256m -Xms256m"
    networks:
      - elk
    healthcheck:
      test: ["CMD-SHELL", "docker-healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 6

  elasticsearch2:
    container_name: elasticsearch2
    hostname: elasticsearch2
    user: "1000:1000"
    cpus: "2"
    mem_limit: "2G"
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - /opt/temp01/elasticsearch/data2:/usr/share/elasticsearch/data
    ports:
      - "9200"
      - "9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - "ES_JAVA_OPTS: -Xmx256m -Xms256m"
    networks:
      - elk
    healthcheck:
      test: ["CMD-SHELL", "docker-healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 6

  logstash:
    container_name: logstash
    hostname: logstash
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      elasticsearch2 :
        condition: service_healthy

  kibana:
    container_name: kibana
    hostname: kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      elasticsearch2 :
        condition: service_healthy

  metricbeat:
    container_name: metricbeat
    hostname: metricbeat
    user: root
    cpus: "2"
    mem_limit: "1G"
    security_opt:
      - seccomp:unconfined
    build:
      context: metricbeat/
      args:
        ELK_VERSION: $ELK_VERSION
    networks:
      - elk
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/docker/metricbeat/data:/usr/share/metricbeat/data
      - ./metricbeat/config/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
    depends_on:
      kibana:
        condition: service_started

  filebeat:
    container_name: filebeat
    hostname: filebeat
    user: root
    build:
      context: metricbeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/run/docker.sock:/var/run/docker.sock
      # This is needed for filebeat to load container log path as specified in filebeat.yml
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      # This is needed for filebeat to load logs for system and auth modules
      - /var/log/:/var/log/:ro
      # This is needed for filebeat to load logs for auditd module
      # - /var/log/audit/:/var/log/audit/:ro
    networks:
      - elk
    environment:
      - ELASTICSEARCH_HOST="elasticsearch"
      - KIBANA_HOST="kibana"
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}
    command: ["--strict.perms=false"]
    depends_on:
      kibana:
        condition: service_started

  elasticsearch-head:
    container_name: head
    hostname: head
    build:
      context: elasticsearch-head/
    ports:
      - "9100:9100"
    networks:
      - elk
    depends_on:
      kibana:
        condition: service_started

networks:
  elk:
    driver: bridge
